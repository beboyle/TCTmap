(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.turf = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";function bezier(s,t){if(t=t||{},!helpers.isObject(t))throw new Error("options is invalid");var i=t.resolution||1e4,e=t.sharpness||.85;if(!s)throw new Error("line is required");if(!helpers.isNumber(i))throw new Error("resolution must be an number");if(!helpers.isNumber(e))throw new Error("sharpness must be an number");for(var r=[],n=new Spline({points:invariant.getGeom(s).coordinates.map(function(s){return{x:s[0],y:s[1]}}),duration:i,sharpness:e}),h=0;h<n.duration;h+=10){var o=n.pos(h);Math.floor(h/100)%2==0&&r.push([o.x,o.y])}return helpers.lineString(r,s.properties)}var helpers=require("@turf/helpers"),invariant=require("@turf/invariant"),Spline=function(s){this.points=s.points||[],this.duration=s.duration||1e4,this.sharpness=s.sharpness||.85,this.centers=[],this.controls=[],this.stepLength=s.stepLength||60,this.length=this.points.length,this.delay=0;for(var t=0;t<this.length;t++)this.points[t].z=this.points[t].z||0;for(var t=0;t<this.length-1;t++){var i=this.points[t],e=this.points[t+1];this.centers.push({x:(i.x+e.x)/2,y:(i.y+e.y)/2,z:(i.z+e.z)/2})}this.controls.push([this.points[0],this.points[0]]);for(var t=0;t<this.centers.length-1;t++){var i=this.centers[t],e=this.centers[t+1],r=this.points[t+1].x-(this.centers[t].x+this.centers[t+1].x)/2,n=this.points[t+1].y-(this.centers[t].y+this.centers[t+1].y)/2,h=this.points[t+1].z-(this.centers[t].y+this.centers[t+1].z)/2;this.controls.push([{x:(1-this.sharpness)*this.points[t+1].x+this.sharpness*(this.centers[t].x+r),y:(1-this.sharpness)*this.points[t+1].y+this.sharpness*(this.centers[t].y+n),z:(1-this.sharpness)*this.points[t+1].z+this.sharpness*(this.centers[t].z+h)},{x:(1-this.sharpness)*this.points[t+1].x+this.sharpness*(this.centers[t+1].x+r),y:(1-this.sharpness)*this.points[t+1].y+this.sharpness*(this.centers[t+1].y+n),z:(1-this.sharpness)*this.points[t+1].z+this.sharpness*(this.centers[t+1].z+h)}])}return this.controls.push([this.points[this.length-1],this.points[this.length-1]]),this.steps=this.cacheSteps(this.stepLength),this};Spline.prototype.cacheSteps=function(s){var t=[],i=this.pos(0);t.push(0);for(var e=0;e<this.duration;e+=10){var r=this.pos(e);Math.sqrt((r.x-i.x)*(r.x-i.x)+(r.y-i.y)*(r.y-i.y)+(r.z-i.z)*(r.z-i.z))>s&&(t.push(e),i=r)}return t},Spline.prototype.vector=function(s){var t=this.pos(s+10),i=this.pos(s-10);return{angle:180*Math.atan2(t.y-i.y,t.x-i.x)/3.14,speed:Math.sqrt((i.x-t.x)*(i.x-t.x)+(i.y-t.y)*(i.y-t.y)+(i.z-t.z)*(i.z-t.z))}},Spline.prototype.pos=function(s){var t=s-this.delay;t<0&&(t=0),t>this.duration&&(t=this.duration-1);var i=t/this.duration;if(i>=1)return this.points[this.length-1];var e=Math.floor((this.points.length-1)*i),r=(this.length-1)*i-e;return function(s,t,i,e,r){var n=function(s){var t=s*s;return[t*s,3*t*(1-s),3*s*(1-s)*(1-s),(1-s)*(1-s)*(1-s)]}(s);return{x:r.x*n[0]+e.x*n[1]+i.x*n[2]+t.x*n[3],y:r.y*n[0]+e.y*n[1]+i.y*n[2]+t.y*n[3],z:r.z*n[0]+e.z*n[1]+i.z*n[2]+t.z*n[3]}}(r,this.points[e],this.controls[e][1],this.controls[e+1][0],this.points[e+1])},module.exports=bezier,module.exports.default=bezier;
},{"@turf/helpers":2,"@turf/invariant":3}],2:[function(require,module,exports){
"use strict";function feature(r,e,t){if(t=t||{},!isObject(t))throw new Error("options is invalid");var o=t.bbox,i=t.id;if(void 0===r)throw new Error("geometry is required");if(e&&e.constructor!==Object)throw new Error("properties must be an Object");o&&validateBBox(o),i&&validateId(i);var n={type:"Feature"};return i&&(n.id=i),o&&(n.bbox=o),n.properties=e||{},n.geometry=r,n}function geometry(r,e,t){if(t=t||{},!isObject(t))throw new Error("options is invalid");var o=t.bbox;if(!r)throw new Error("type is required");if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");o&&validateBBox(o);var i;switch(r){case"Point":i=point(e).geometry;break;case"LineString":i=lineString(e).geometry;break;case"Polygon":i=polygon(e).geometry;break;case"MultiPoint":i=multiPoint(e).geometry;break;case"MultiLineString":i=multiLineString(e).geometry;break;case"MultiPolygon":i=multiPolygon(e).geometry;break;default:throw new Error(r+" is invalid")}return o&&(i.bbox=o),i}function point(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");if(r.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!isNumber(r[0])||!isNumber(r[1]))throw new Error("coordinates must contain numbers");return feature({type:"Point",coordinates:r},e,t)}function points(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return featureCollection(r.map(function(r){return point(r,e)}),t)}function polygon(r,e,t){if(!r)throw new Error("coordinates is required");for(var o=0;o<r.length;o++){var i=r[o];if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var n=0;n<i[i.length-1].length;n++){if(0===o&&0===n&&!isNumber(i[0][0])||!isNumber(i[0][1]))throw new Error("coordinates must contain numbers");if(i[i.length-1][n]!==i[0][n])throw new Error("First and last Position are not equivalent.")}}return feature({type:"Polygon",coordinates:r},e,t)}function polygons(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return featureCollection(r.map(function(r){return polygon(r,e)}),t)}function lineString(r,e,t){if(!r)throw new Error("coordinates is required");if(r.length<2)throw new Error("coordinates must be an array of two or more positions");if(!isNumber(r[0][1])||!isNumber(r[0][1]))throw new Error("coordinates must contain numbers");return feature({type:"LineString",coordinates:r},e,t)}function lineStrings(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return featureCollection(r.map(function(r){return lineString(r,e)}),t)}function featureCollection(r,e){if(e=e||{},!isObject(e))throw new Error("options is invalid");var t=e.bbox,o=e.id;if(!r)throw new Error("No features passed");if(!Array.isArray(r))throw new Error("features must be an Array");t&&validateBBox(t),o&&validateId(o);var i={type:"FeatureCollection"};return o&&(i.id=o),t&&(i.bbox=t),i.features=r,i}function multiLineString(r,e,t){if(!r)throw new Error("coordinates is required");return feature({type:"MultiLineString",coordinates:r},e,t)}function multiPoint(r,e,t){if(!r)throw new Error("coordinates is required");return feature({type:"MultiPoint",coordinates:r},e,t)}function multiPolygon(r,e,t){if(!r)throw new Error("coordinates is required");return feature({type:"MultiPolygon",coordinates:r},e,t)}function geometryCollection(r,e,t){if(!r)throw new Error("geometries is required");if(!Array.isArray(r))throw new Error("geometries must be an Array");return feature({type:"GeometryCollection",geometries:r},e,t)}function round(r,e){if(void 0===r||null===r||isNaN(r))throw new Error("num is required");if(e&&!(e>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,e||0);return Math.round(r*t)/t}function radiansToLength(r,e){if(void 0===r||null===r)throw new Error("radians is required");if(e&&"string"!=typeof e)throw new Error("units must be a string");var t=factors[e||"kilometers"];if(!t)throw new Error(e+" units is invalid");return r*t}function lengthToRadians(r,e){if(void 0===r||null===r)throw new Error("distance is required");if(e&&"string"!=typeof e)throw new Error("units must be a string");var t=factors[e||"kilometers"];if(!t)throw new Error(e+" units is invalid");return r/t}function lengthToDegrees(r,e){return radiansToDegrees(lengthToRadians(r,e))}function bearingToAzimuth(r){if(null===r||void 0===r)throw new Error("bearing is required");var e=r%360;return e<0&&(e+=360),e}function radiansToDegrees(r){if(null===r||void 0===r)throw new Error("radians is required");return r%(2*Math.PI)*180/Math.PI}function degreesToRadians(r){if(null===r||void 0===r)throw new Error("degrees is required");return r%360*Math.PI/180}function convertLength(r,e,t){if(null===r||void 0===r)throw new Error("length is required");if(!(r>=0))throw new Error("length must be a positive number");return radiansToLength(lengthToRadians(r,e),t||"kilometers")}function convertArea(r,e,t){if(null===r||void 0===r)throw new Error("area is required");if(!(r>=0))throw new Error("area must be a positive number");var o=areaFactors[e||"meters"];if(!o)throw new Error("invalid original units");var i=areaFactors[t||"kilometers"];if(!i)throw new Error("invalid final units");return r/o*i}function isNumber(r){return!isNaN(r)&&null!==r&&!Array.isArray(r)}function isObject(r){return!!r&&r.constructor===Object}function validateBBox(r){if(!r)throw new Error("bbox is required");if(!Array.isArray(r))throw new Error("bbox must be an Array");if(4!==r.length&&6!==r.length)throw new Error("bbox must be an Array of 4 or 6 numbers");r.forEach(function(r){if(!isNumber(r))throw new Error("bbox must only contain numbers")})}function validateId(r){if(!r)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof r))throw new Error("id must be a number or a string")}function radians2degrees(){throw new Error("method has been renamed to `radiansToDegrees`")}function degrees2radians(){throw new Error("method has been renamed to `degreesToRadians`")}function distanceToDegrees(){throw new Error("method has been renamed to `lengthToDegrees`")}function distanceToRadians(){throw new Error("method has been renamed to `lengthToRadians`")}function radiansToDistance(){throw new Error("method has been renamed to `radiansToLength`")}function bearingToAngle(){throw new Error("method has been renamed to `bearingToAzimuth`")}function convertDistance(){throw new Error("method has been renamed to `convertLength`")}Object.defineProperty(exports,"__esModule",{value:!0});var earthRadius=6371008.8,factors={meters:earthRadius,metres:earthRadius,millimeters:1e3*earthRadius,millimetres:1e3*earthRadius,centimeters:100*earthRadius,centimetres:100*earthRadius,kilometers:earthRadius/1e3,kilometres:earthRadius/1e3,miles:earthRadius/1609.344,nauticalmiles:earthRadius/1852,inches:39.37*earthRadius,yards:earthRadius/1.0936,feet:3.28084*earthRadius,radians:1,degrees:earthRadius/111325},unitsFactors={meters:1,metres:1,millimeters:1e3,millimetres:1e3,centimeters:100,centimetres:100,kilometers:.001,kilometres:.001,miles:1/1609.344,nauticalmiles:1/1852,inches:39.37,yards:1/1.0936,feet:3.28084,radians:1/earthRadius,degrees:1/111325},areaFactors={meters:1,metres:1,millimeters:1e6,millimetres:1e6,centimeters:1e4,centimetres:1e4,kilometers:1e-6,kilometres:1e-6,acres:247105e-9,miles:3.86e-7,yards:1.195990046,feet:10.763910417,inches:1550.003100006};exports.earthRadius=earthRadius,exports.factors=factors,exports.unitsFactors=unitsFactors,exports.areaFactors=areaFactors,exports.feature=feature,exports.geometry=geometry,exports.point=point,exports.points=points,exports.polygon=polygon,exports.polygons=polygons,exports.lineString=lineString,exports.lineStrings=lineStrings,exports.featureCollection=featureCollection,exports.multiLineString=multiLineString,exports.multiPoint=multiPoint,exports.multiPolygon=multiPolygon,exports.geometryCollection=geometryCollection,exports.round=round,exports.radiansToLength=radiansToLength,exports.lengthToRadians=lengthToRadians,exports.lengthToDegrees=lengthToDegrees,exports.bearingToAzimuth=bearingToAzimuth,exports.radiansToDegrees=radiansToDegrees,exports.degreesToRadians=degreesToRadians,exports.convertLength=convertLength,exports.convertArea=convertArea,exports.isNumber=isNumber,exports.isObject=isObject,exports.validateBBox=validateBBox,exports.validateId=validateId,exports.radians2degrees=radians2degrees,exports.degrees2radians=degrees2radians,exports.distanceToDegrees=distanceToDegrees,exports.distanceToRadians=distanceToRadians,exports.radiansToDistance=radiansToDistance,exports.bearingToAngle=bearingToAngle,exports.convertDistance=convertDistance;
},{}],3:[function(require,module,exports){
"use strict";function getCoord(e){if(!e)throw new Error("obj is required");var r=getCoords(e);if(r.length>1&&helpers.isNumber(r[0])&&helpers.isNumber(r[1]))return r;throw new Error("Coordinate is not a valid Point")}function getCoords(e){if(!e)throw new Error("obj is required");var r;if(e.length?r=e:e.coordinates?r=e.coordinates:e.geometry&&e.geometry.coordinates&&(r=e.geometry.coordinates),r)return containsNumber(r),r;throw new Error("No valid coordinates")}function containsNumber(e){if(e.length>1&&helpers.isNumber(e[0])&&helpers.isNumber(e[1]))return!0;if(Array.isArray(e[0])&&e[0].length)return containsNumber(e[0]);throw new Error("coordinates must only contain numbers")}function geojsonType(e,r,o){if(!r||!o)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+o+": must be a "+r+", given "+e.type)}function featureOf(e,r,o){if(!e)throw new Error("No feature passed");if(!o)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+o+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+o+": must be a "+r+", given "+e.geometry.type)}function collectionOf(e,r,o){if(!e)throw new Error("No featureCollection passed");if(!o)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+o+", FeatureCollection required");for(var t=0;t<e.features.length;t++){var n=e.features[t];if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+o+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+o+": must be a "+r+", given "+n.geometry.type)}}function getGeom(e){if(!e)throw new Error("geojson is required");if(void 0!==e.geometry)return e.geometry;if(e.coordinates||e.geometries)return e;throw new Error("geojson must be a valid Feature or Geometry Object")}function getGeomType(){throw new Error("invariant.getGeomType has been deprecated in v5.0 in favor of invariant.getType")}function getType(e,r){if(!e)throw new Error((r||"geojson")+" is required");if(e.geometry&&e.geometry.type)return e.geometry.type;if(e.type)return e.type;throw new Error((r||"geojson")+" is invalid")}Object.defineProperty(exports,"__esModule",{value:!0});var helpers=require("@turf/helpers");exports.getCoord=getCoord,exports.getCoords=getCoords,exports.containsNumber=containsNumber,exports.geojsonType=geojsonType,exports.featureOf=featureOf,exports.collectionOf=collectionOf,exports.getGeom=getGeom,exports.getGeomType=getGeomType,exports.getType=getType;

},{"@turf/helpers":2}],4:[function(require,module,exports){
module.exports={bezierSpline:require("@turf/bezier-spline")};
},{"@turf/bezier-spline":1}]},{},[4])(4)
});
